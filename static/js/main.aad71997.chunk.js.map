{"version":3,"sources":["array.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getBetweenDates","startDate","endDate","frequency","diffDateLength","getFullYear","getDiffYear","getTotalMonth","getDiffMonth","_startDate","Date","getMonth","getDate","timestamp","getTime","timestampToHour","getDiffDate","getHours","getDiffHour","getMinutes","timestampToMinute","getDiffMinute","getDiffDateLength","targetDate","year","month","date","day","getDay","hour","minute","second","getSeconds","dateToDetail","betweenDates","from","to","max","Math","min","length","Array","keys","map","num","reverse","getNumberArray","value","Error","App","useState","setStartDate","setEndDate","setFrequency","onChangeStartDate","useCallback","event","target","onChangeEndDate","onChangeFrequency","dates","format","useMemo","className","type","name","onChange","checked","index","moment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aad71997.chunk.js","sourcesContent":["export interface DateDetail {\r\n  year: number;\r\n  month: number; // 0이 1월\r\n  date: number;\r\n  day: number; // 0이 일요일\r\n  hour: number;\r\n  minute: number;\r\n  second: number;\r\n}\r\n\r\nexport function dateToDetail(targetDate = new Date()): DateDetail {\r\n  const year = targetDate.getFullYear();\r\n  const month = targetDate.getMonth(); // 0이 1월\r\n  const date = targetDate.getDate();\r\n  const day = targetDate.getDay(); // 0이 일요일\r\n  const hour = targetDate.getHours();\r\n  const minute = targetDate.getMinutes();\r\n  const second = targetDate.getSeconds();\r\n\r\n  return {\r\n    year, month, date, day, hour, minute, second\r\n  };\r\n}\r\n\r\n/**\r\n * @return from, to 사이의 자연수를 배열로 만들어 반환. from, to의 경계도 포함.\r\n * @example (-1, 4) => [-1, 0, 1, 2, 3, 4]\r\n * @example (4, -1) => [4, 3, 2, 1, 0, -1]\r\n */\r\nexport function getNumberArray(from :number, to: number): number[] {\r\n\r\n  const max = Math.max(from, to);\r\n  const min = Math.min(from, to);\r\n  const length = max - min + 1;\r\n\r\n  if(from > to)\r\n    return [...new Array(length).keys()].map(num => num + min).reverse();\r\n\r\n  else\r\n    return [...new Array(length).keys()].map(num => num + min);\r\n}\r\n\r\nexport type Frequency = 'minute' | 'hour' | 'date' | 'month' | 'year';\r\n\r\n/**\r\n * 1. start가 end보다 나중인경우 : []\r\n * 2. start가 end랑 같은경우 : start 하나 (= end하나)\r\n * 3. 그 외 : [start, (사이), end]\r\n */\r\n\r\nexport function getBetweenDates(startDate: Date, endDate: Date, frequency: Frequency): Date[] {\r\n\r\n  const diffDateLength = getDiffDateLength(startDate, endDate, frequency);\r\n\r\n  if (diffDateLength < 0) {\r\n    return [];\r\n  }\r\n\r\n  if (diffDateLength === 0) {\r\n    return [startDate];\r\n  }\r\n\r\n  if (diffDateLength === 1) {\r\n    return [startDate, endDate];\r\n  }\r\n\r\n  const {date, month, year, minute, hour} = dateToDetail(startDate);\r\n\r\n  const betweenDates = getNumberArray(1, diffDateLength - 1).map(value => {\r\n\r\n    switch (frequency) {\r\n      case 'year':\r\n        return new Date(year + value, 0);\r\n\r\n      case 'month':\r\n        return new Date(year, month + value);\r\n\r\n      case 'date':\r\n        return new Date(year, month, date + value);\r\n\r\n      case 'hour':\r\n        return new Date(year, month, date, hour + value);\r\n\r\n      case 'minute':\r\n        return new Date(year, month, date, hour, minute + value);\r\n\r\n      default:\r\n        throw Error(`invalid frequency ${frequency}`);\r\n    }\r\n  });\r\n\r\n  return [startDate, ...betweenDates, endDate];\r\n}\r\n\r\nconst MILLISECOND = 1000;\r\nconst SECOND = 60;\r\nconst MINUTE = 60;\r\nconst HOUR = 24;\r\n\r\nexport function timestampToMinute(timestamp: number): number {\r\n  return timestamp / SECOND / MILLISECOND;\r\n}\r\n\r\nexport function timestampToHour(timestamp: number): number {\r\n  return timestampToMinute(timestamp) / MINUTE;\r\n}\r\n\r\nexport function timestampToDate(timestamp: number): number {\r\n  return timestampToHour(timestamp) / HOUR;\r\n}\r\n\r\nexport function getDiffYear(startDate: Date, endDate: Date): number {\r\n  return endDate.getFullYear() - startDate.getFullYear();\r\n}\r\n\r\nfunction getTotalMonth(date: Date) {\r\n  return date.getFullYear() * 12 + date.getMonth();\r\n}\r\n\r\nexport function getDiffMonth(startDate: Date, endDate: Date): number {\r\n  return getTotalMonth(endDate) - getTotalMonth(startDate);\r\n}\r\n\r\nexport function getDiffDate(startDate: Date, endDate: Date): number {\r\n  const _startDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\r\n  const _endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());\r\n  return timestampToDate(_endDate.getTime() - _startDate.getTime());\r\n}\r\n\r\nexport function getDiffHour(startDate: Date, endDate: Date): number {\r\n  const _startDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours());\r\n  const _endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), endDate.getHours());\r\n  return timestampToHour(_endDate.getTime() - _startDate.getTime());\r\n}\r\n\r\nexport function getDiffMinute(startDate: Date, endDate: Date): number {\r\n  const _startDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes());\r\n  const _endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), endDate.getHours(), endDate.getMinutes());\r\n  return timestampToMinute(_endDate.getTime() - _startDate.getTime());\r\n}\r\n\r\nexport function getDiffDateLength(startDate: Date, endDate: Date, frequency: Frequency): number {\r\n\r\n  switch (frequency) {\r\n    case 'year':\r\n      return getDiffYear(startDate, endDate);\r\n\r\n    case 'month':\r\n      return getDiffMonth(startDate, endDate);\r\n\r\n    case 'date':\r\n      return getDiffDate(startDate, endDate);\r\n\r\n    case 'hour':\r\n      return getDiffHour(startDate, endDate);\r\n\r\n    case 'minute':\r\n      return getDiffMinute(startDate, endDate);\r\n  }\r\n}\r\n","import moment from 'moment';\r\nimport React, {ChangeEvent, useCallback, useMemo, useState} from 'react';\r\nimport './App.css';\r\nimport {Frequency, getBetweenDates} from './array';\r\n\r\nexport default function App() {\r\n\r\n  const [startDate, setStartDate] = useState('2020-12-01');\r\n  const [endDate, setEndDate] = useState('2020-12-10');\r\n  const [frequency, setFrequency] = useState<Frequency>('date');\r\n\r\n  const onChangeStartDate = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    setStartDate(event.target.value);\r\n  }, []);\r\n\r\n  const onChangeEndDate = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    setEndDate(event.target.value);\r\n  }, []);\r\n\r\n  const onChangeFrequency = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    setFrequency(event.target.value as Frequency);\r\n  }, []);\r\n\r\n  const dates = getBetweenDates(new Date(startDate), new Date(endDate), frequency);\r\n  const format = useMemo(() => {\r\n\r\n    switch (frequency) {\r\n      case 'year':\r\n      case 'month':\r\n      case 'date':\r\n        return 'YYYY년 MM월 DD일';\r\n\r\n      case 'hour':\r\n        return 'YYYY년 MM월 DD일 HH시';\r\n\r\n      case 'minute':\r\n        return 'YYYY년 MM월 DD일 HH시 mm분'\r\n    }\r\n\r\n  }, [frequency]);\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <form>\r\n        <label className=\"radio-wrap\">\r\n          <input type=\"radio\" name=\"frequency\" value=\"year\" onChange={onChangeFrequency} checked={frequency === 'year'}/>\r\n          연간\r\n        </label>\r\n        <label className=\"radio-wrap\">\r\n          <input type=\"radio\" name=\"frequency\" value=\"month\" onChange={onChangeFrequency} checked={frequency === 'month'}/>\r\n          월간\r\n        </label>\r\n        <label className=\"radio-wrap\">\r\n          <input type=\"radio\" name=\"frequency\" value=\"date\" onChange={onChangeFrequency} checked={frequency === 'date'}/>\r\n          일간\r\n        </label>\r\n        <label className=\"radio-wrap\">\r\n          <input type=\"radio\" name=\"frequency\" value=\"hour\" onChange={onChangeFrequency} checked={frequency === 'hour'}/>\r\n          시간별\r\n        </label>\r\n        <label className=\"radio-wrap\">\r\n          <input type=\"radio\" name=\"frequency\" value=\"minute\" onChange={onChangeFrequency} checked={frequency === 'minute'}/>\r\n          분별\r\n        </label>\r\n        <input className=\"date-picker\" type=\"date\" value={startDate} onChange={onChangeStartDate}/>\r\n        <input className=\"date-picker\" type=\"date\" value={endDate} onChange={onChangeEndDate}/>\r\n      </form>\r\n      <span className=\"total\">총 갯수 = {dates.length}개</span>\r\n      <ul className=\"container\">\r\n        {dates.map((date, index) => (\r\n            <li key={index}>{moment(date).format(format)}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}